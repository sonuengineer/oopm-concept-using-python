Creating behaviors 
   We can create behavior in a class by adding functions in a class.
   However, such functions should have a special parameter called self as the first parameter. 
   Such functions which describe the behavior are also called as methods.
   We can invoke the methods using the dot operator as shown.
   Even though purchase() is accepting a parameter called self, we need not pass it when we invoke it.
   
class Mobile:
    def __init__(self):
        print("Inside constructor")

    def purchase (self):
        print("Purchasing a mobile")

mob1=Mobile()
mob1.purchase()
       Output:
Inside constructor
Purchasing a mobile      

Method accessing attributes:
  We can access an attribute in a method by using self.
  Value of the attribute accessed inside the method is determined by the object used to invoke the method.
  For example, in the code below when we invoke purchase using mob1, attribute values (Apple and 20000) of mob1 are accessed.
  Similarly, when mob2 is used to invoke purchase, attribute values (Samsung and 3000) of mob2 are accessed in purchase().
  
  class Mobile:
    def __init__(self, brand, price):
        print("Inside constructor")
        self.brand = brand
        self.price = price
        
    def purchase(self):
        print("Purchasing a mobile")
        print("This mobile has brand", self.brand, "and price", self.price)
        
print("Mobile-1")
mob1=Mobile("Apple", 20000)
mob1.purchase()

print("Mobile-2")
mob2=Mobile("Samsung",3000)
mob2.purchase()
Output:

Mobile-1
Inside constructor
Purchasing a mobile
This mobile has brand Apple and price 20000
Mobile-2
Inside constructor
Purchasing a mobile
This mobile has brand Samsung and price 3000

Invoking methods 
  class Mobile:
    def display(self):
        print("Displaying details")

    def purchase(self):
        self.display()
        print("Calculating price")

Mobile().purchase()
Output:

Displaying details
Calculating price


                                                    
                          
