Consider the below code which allows you to purchase different products. All products have discount of 10%.
Run the below code and observe the output.

def purchase_product(product_type, price):
    discount = 10
    total_price = price - price * discount / 100
    print("Total price of " +product_type+ " is "+str(total_price))

purchase_product("Mobile", 20000)
purchase_product("Shoe", 200)

Output:

Total price of Mobile is 18000.0
Total price of Shoe is 180.0

Problem Statement
Let us say that we want to update our code such that:

if the mobile brand is Apple then the discount is 10% else the discount is 5%
all shoes have 2% tax and no discount
We can accomplish this by adding additional parameters to the function and updating the logic.

def purchase_product(product_type, price, mobile_brand = None):
    if product_type == "Mobile":
        if mobile_brand == "Apple":
            discount = 10
        else:
            discount = 5
        total_price = price - price * discount / 100
    else:
        total_price = price + price * 2 / 100

    print("Total price of " +product_type  + " is "+str(total_price))

purchase_product("Mobile", 20000, "Apple")
purchase_product("Shoe", 200)
                                                
   Output:

Total price of Mobile is 18000.0
Total price of Shoe is 204.0

def purchase_product(product_type,price,mobile_brand,material):
    if product_type == "Mobile":
        if mobile_brand == "Apple":
            discount = 10
        else:
            discount = 5
        total_price = price - price * discount / 100
    else:
        if material == "leather":
            tax = 5
        else:
            tax = 2
        total_price = price + price * tax / 100
    print("Total price of "+product_type+" is "+str(total_price))

purchase_product("Mobile",20000,"Apple",None)
purchase_product("Shoe",200,None,"leather")
                                                    
 Output:

Total price of Mobile is 18000.0
Total price of Shoe is 210.0

Problem Statement
A better solution would be to modularize the code and separate the logic for Mobiles and Shoes.

Modify the code in the below code pane as per the following guidelines:

Create two functions: purchase_mobile and purchase_shoe
purchase_mobile() takes two parameters: price and brand
purchase_shoe() takes two parameters: price and material
If the mobile brand is “Apple”, discount is 10%, else discount is 5%
If the shoe material is “leather”, tax is 5%, else tax is 2%

def purchase_mobile(price,brand):
    if brand == "Apple":
        discount = 10
    else:
        discount = 5
    total_price = price - price * discount / 100

    print("Total price of Mobile is "+str(total_price))

def purchase_shoe(price,material):
    if material == "leather":
        tax = 5
    else:
        tax = 2
    total_price = price + price * tax / 100

    print("Total price of Shoe is "+str(total_price))

purchase_mobile(20000,"Apple")
purchase_shoe(200,"leather")

 Output:

Total price of Mobile is 18000.0
Total price of Shoe is 210.0

We want to provide users with facility to return products as well. During return, refund amount should be displayed
Display refund amount - Solution 1

def return_mobile(price, brand):
    if brand == "Apple":
        discount = 10
    else:
        discount = 5
    total_price = price - price * discount / 100

    print("Refund price for Mobile is "+str(total_price))

def return_shoe(price, material):
    if material == "leather":
        tax = 5
    else:
        tax = 2
    total_price = price + price * tax  /100

    print("Refund price for Shoe is "+str(total_price))

return_mobile(1000, "Samsung")

Output:

Refund price for Mobile is 950.0

Display refund amount - Solution 2
we can use global variables. We calculate the price during purchase and store it in a global variable. 
Later during return we access the calculated price from the global variable.

total_price_mobile = 0
total_price_shoe = 0
def purchase_mobile(price,brand):
    global total_price_mobile
    if brand == "Apple":
        discount = 10
    else:
        discount = 5
    total_price_mobile = price - price * discount / 100
    print("Total price for Mobile is "+str(total_price_mobile))

def purchase_shoe(price,material):
    global total_price_shoe
    if material == "leather":
        tax = 5
    else:
        tax = 2
    total_price_shoe = price + price * tax / 100
    print("Total price for Shoe is "+str(total_price_shoe))

def return_mobile():
    print("Refund price for Mobile is ",total_price_mobile)

def return_shoe():
    print("Refund price for Shoe is ",total_price_shoe)

purchase_mobile(20000,"Apple")
purchase_shoe(200,"leather")
return_mobile()
                                                    
      Output:

Total price for Mobile is 18000.0
Total price for Shoe is 210.0
Refund price for Mobile is 18000.0

Display refund amount - Solution 2 complications
What if we want to purchase two mobiles and return one of them? Which will be returned?
Also, can we be sure that purchase_shoe() won't accidentally modify the global value for mobile?
 
 total_price_mobile = 0
total_price_shoe = 0
def purchase_mobile(price,brand):
    global total_price_mobile
    if brand == "Apple":
        discount = 10
    else:
        discount = 5
    total_price_mobile = price - price * discount / 100
    print("Total price for Mobile is "+str(total_price_mobile))

def purchase_shoe(price,material):
    global total_price_shoe
    if material == "leather":
        tax = 5
    else:
        tax = 2
    total_price_shoe = price + price * tax / 100
    print("Total price for Shoe is "+str(total_price_shoe))

def return_mobile():
    print("Refund price for Mobile is ",total_price_mobile)

def return_shoe():
    print("Refund price for Shoe is ",total_price_shoe)

purchase_mobile(20000,"Apple")
purchase_shoe(200,"leather")
purchase_mobile(2000,"Samsung")
return_mobile()

  Output:

Total price for Mobile is 18000.0
Total price for Shoe is 210.0
Total price for Mobile is 1900.0
Refund price for Mobile is 1900.0

OOP Introduction - Summary
 We can see that with our current style of programming, 
we quickly run into complications trying to simulate real world scenarios, like purchasing and returning a product.
The problem arises due to the fact that in real life everything has some data/characteristic associated with it 
and some behavior associated with it and we are not able to replicate this in a code. For example:
All mobiles have price and brand as its data and purchase and return as its behavior.
All shoes have price and material as its data and purchase and return as its behavior.
We need a way of programming which allows to club together the data and behavior
so that it becomes easier to code real world scenarios.
                                                    
                                                    

